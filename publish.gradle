allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    if (project == rootProject) {
        apply plugin: 'io.github.gradle-nexus.publish-plugin'
    }
}

subprojects {
    if (!project.findProperty("ARTIFACT_VERSION")) {
        return
    }

    apply plugin: 'com.android.library'

    def targetProject = findProperty "target"

    if ("${project.name}" == targetProject) {
        nexusPublishing.repositories {
            sonatype {
                def profileId = findProperty('stagingProfileId')
                stagingProfileId = profileId
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            }
        }
    }

    android {
        publishing {
            singleVariant("release") {
                withSourcesJar()
                withJavadocJar()
            }
        }
    }

    def artifactVersion = ARTIFACT_VERSION
    def projectURL = findProperty("url")
    def groupID = findProperty("groupId")

    group = groupID
    version = artifactVersion

    afterEvaluate.publishing {
        publications {
            release(MavenPublication) {
                groupId = groupID
                artifactId = "driver-$project.name"
                version artifactVersion
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    artifact("$buildDir/outputs/aar/$project.name-release.aar")
                }
                pom {
                    name = "driver-$project.name"
                        description = "driver-$project.name"
                        url = projectURL
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                    developers {
                        developer {
                            id = "luke.go"
                            name = "Luke Go"
                            email = "sangch.go@gmail.com"
                        }
                    }
                    scm {
                        url = projectURL
                        connection = "scm:${projectURL}.git"
                        developerConnection = "scm:${projectURL}.git"
                    }
                }
            }
        }
        signing {
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications
        }
    }
}
